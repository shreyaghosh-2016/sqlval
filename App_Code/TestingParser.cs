//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\HP\documents\visual studio 2013\Projects\Testing\Testing\Testing.g4 by ANTLR 4.4.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Testing {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.4.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class TestingParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, CR=9, 
		SL=10, TAB=11, WHERE=12, TYPE1=13, TYPE2=14, TYPE3=15, CONSTRAINT1=16, 
		CONSTRAINT2=17, CH=18, DF=19, INSERT=20, INTO=21, VALUES=22, FROM=23, 
		NUM=24, SC=25, REL=26, COMMA=27, A=28, ID=29, WS=30, AVG=31;
	public const int
		RULE_gram = 0, RULE_startc = 1, RULE_init = 2, RULE_drop = 3, RULE_exp = 4, 
		RULE_sel = 5, RULE_selexp = 6, RULE_colsel = 7, RULE_tabsel = 8, RULE_ins = 9, 
		RULE_insexp1 = 10, RULE_insexp2 = 11;
	public static readonly string[] ruleNames = {
		"gram", "startc", "init", "drop", "exp", "sel", "selexp", "colsel", "tabsel", 
		"ins", "insexp1", "insexp2"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'DROP'", "'''", "'*'", "'COUNT'", "'AVG'", "'MIN'", 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "';'", null, "','", "'MAX'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "CR", "SL", "TAB", 
		"WHERE", "TYPE1", "TYPE2", "TYPE3", "CONSTRAINT1", "CONSTRAINT2", "CH", 
		"DF", "INSERT", "INTO", "VALUES", "FROM", "NUM", "SC", "REL", "COMMA", 
		"A", "ID", "WS", "AVG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Testing.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


	    protected const int EOF = Eof;

	public TestingParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class GramContext : ParserRuleContext {
		public StartcContext startc() {
			return GetRuleContext<StartcContext>(0);
		}
		public InitContext init(int i) {
			return GetRuleContext<InitContext>(i);
		}
		public IReadOnlyList<InitContext> init() {
			return GetRuleContexts<InitContext>();
		}
		public GramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gram; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterGram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitGram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GramContext gram() {
		GramContext _localctx = new GramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_gram);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 24; init();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 27;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			{
			State = 29; startc();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartcContext : ParserRuleContext {
		public IReadOnlyList<SelContext> sel() {
			return GetRuleContexts<SelContext>();
		}
		public IReadOnlyList<InsContext> ins() {
			return GetRuleContexts<InsContext>();
		}
		public InitContext init(int i) {
			return GetRuleContext<InitContext>(i);
		}
		public SelContext sel(int i) {
			return GetRuleContext<SelContext>(i);
		}
		public InsContext ins(int i) {
			return GetRuleContext<InsContext>(i);
		}
		public IReadOnlyList<InitContext> init() {
			return GetRuleContexts<InitContext>();
		}
		public DropContext drop(int i) {
			return GetRuleContext<DropContext>(i);
		}
		public IReadOnlyList<DropContext> drop() {
			return GetRuleContexts<DropContext>();
		}
		public StartcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startc; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterStartc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitStartc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartcContext startc() {
		StartcContext _localctx = new StartcContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_startc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << CR) | (1L << SL) | (1L << INSERT))) != 0)) {
				{
				State = 35;
				switch (_input.La(1)) {
				case SL:
					{
					State = 31; sel();
					}
					break;
				case INSERT:
					{
					State = 32; ins();
					}
					break;
				case CR:
					{
					State = 33; init();
					}
					break;
				case T__2:
					{
					State = 34; drop();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 39;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init; } }
	 
		public InitContext() { }
		public virtual void CopyFrom(InitContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StartContext : InitContext {
		public ITerminalNode TAB() { return GetToken(TestingParser.TAB, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode CR() { return GetToken(TestingParser.CR, 0); }
		public ITerminalNode SC() { return GetToken(TestingParser.SC, 0); }
		public StartContext(InitContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_init);
		try {
			_localctx = new StartContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(CR);
			State = 41; Match(TAB);
			State = 42; Match(ID);
			State = 43; Match(T__0);
			State = 44; exp(0);
			State = 45; Match(T__1);
			State = 46; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropContext : ParserRuleContext {
		public DropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop; } }
	 
		public DropContext() { }
		public virtual void CopyFrom(DropContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DroptContext : DropContext {
		public ITerminalNode TAB() { return GetToken(TestingParser.TAB, 0); }
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode SC() { return GetToken(TestingParser.SC, 0); }
		public DroptContext(DropContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterDropt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitDropt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropContext drop() {
		DropContext _localctx = new DropContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_drop);
		try {
			_localctx = new DroptContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(T__2);
			State = 49; Match(TAB);
			State = 50; Match(ID);
			State = 51; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Iddf3Context : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(TestingParser.ID); }
		public ITerminalNode TYPE3() { return GetToken(TestingParser.TYPE3, 0); }
		public ITerminalNode DF() { return GetToken(TestingParser.DF, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(TestingParser.ID, i);
		}
		public Iddf3Context(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIddf3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIddf3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIddf3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idnc3cContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode TYPE3() { return GetToken(TestingParser.TYPE3, 0); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public Idnc3cContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdnc3c(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdnc3c(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdnc3c(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idc23cContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode TYPE3() { return GetToken(TestingParser.TYPE3, 0); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode CONSTRAINT2() { return GetToken(TestingParser.CONSTRAINT2, 0); }
		public Idc23cContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdc23c(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdc23c(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdc23c(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idc13cContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode TYPE3() { return GetToken(TestingParser.TYPE3, 0); }
		public ITerminalNode CONSTRAINT1() { return GetToken(TestingParser.CONSTRAINT1, 0); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public Idc13cContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdc13c(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdc13c(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdc13c(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Iddf1Context : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode DF() { return GetToken(TestingParser.DF, 0); }
		public ITerminalNode TYPE1() { return GetToken(TestingParser.TYPE1, 0); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public Iddf1Context(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIddf1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIddf1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIddf1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idc23aContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode TYPE3() { return GetToken(TestingParser.TYPE3, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode A() { return GetToken(TestingParser.A, 0); }
		public ITerminalNode CONSTRAINT2() { return GetToken(TestingParser.CONSTRAINT2, 0); }
		public Idc23aContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdc23a(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdc23a(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdc23a(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Iddf2Context : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(TestingParser.ID); }
		public ITerminalNode DF() { return GetToken(TestingParser.DF, 0); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(TestingParser.ID, i);
		}
		public ITerminalNode TYPE2() { return GetToken(TestingParser.TYPE2, 0); }
		public ITerminalNode A() { return GetToken(TestingParser.A, 0); }
		public Iddf2Context(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIddf2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIddf2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIddf2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idc13aContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode TYPE3() { return GetToken(TestingParser.TYPE3, 0); }
		public ITerminalNode CONSTRAINT1() { return GetToken(TestingParser.CONSTRAINT1, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode A() { return GetToken(TestingParser.A, 0); }
		public Idc13aContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdc13a(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdc13a(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdc13a(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idch3cContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(TestingParser.ID); }
		public ITerminalNode TYPE3() { return GetToken(TestingParser.TYPE3, 0); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(TestingParser.ID, i);
		}
		public ITerminalNode REL() { return GetToken(TestingParser.REL, 0); }
		public ITerminalNode CH() { return GetToken(TestingParser.CH, 0); }
		public Idch3cContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdch3c(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdch3c(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdch3c(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Ridnc2Context : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode TYPE2() { return GetToken(TestingParser.TYPE2, 0); }
		public ITerminalNode A() { return GetToken(TestingParser.A, 0); }
		public Ridnc2Context(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterRidnc2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitRidnc2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRidnc2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Ridnc1Context : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode TYPE1() { return GetToken(TestingParser.TYPE1, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public Ridnc1Context(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterRidnc1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitRidnc1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRidnc1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idc21Context : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(TestingParser.ID); }
		public ITerminalNode TYPE1() { return GetToken(TestingParser.TYPE1, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(TestingParser.ID, i);
		}
		public ITerminalNode CONSTRAINT2() { return GetToken(TestingParser.CONSTRAINT2, 0); }
		public Idc21Context(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdc21(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdc21(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdc21(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idch3aContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(TestingParser.ID); }
		public ITerminalNode TYPE3() { return GetToken(TestingParser.TYPE3, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(TestingParser.ID, i);
		}
		public ITerminalNode REL() { return GetToken(TestingParser.REL, 0); }
		public ITerminalNode CH() { return GetToken(TestingParser.CH, 0); }
		public ITerminalNode A() { return GetToken(TestingParser.A, 0); }
		public Idch3aContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdch3a(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdch3a(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdch3a(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Iddf2cContext : ExpContext {
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(TestingParser.ID); }
		public ITerminalNode DF() { return GetToken(TestingParser.DF, 0); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(TestingParser.ID, i);
		}
		public ITerminalNode TYPE2() { return GetToken(TestingParser.TYPE2, 0); }
		public Iddf2cContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIddf2c(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIddf2c(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIddf2c(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idnc2Context : ExpContext {
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode TYPE2() { return GetToken(TestingParser.TYPE2, 0); }
		public ITerminalNode A() { return GetToken(TestingParser.A, 0); }
		public Idnc2Context(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdnc2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdnc2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdnc2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Ridnc2cContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode TYPE2() { return GetToken(TestingParser.TYPE2, 0); }
		public Ridnc2cContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterRidnc2c(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitRidnc2c(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRidnc2c(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idnc3Context : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode TYPE3() { return GetToken(TestingParser.TYPE3, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public Idnc3Context(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdnc3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdnc3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdnc3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdchcContext : ExpContext {
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(TestingParser.ID); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(TestingParser.ID, i);
		}
		public ITerminalNode REL() { return GetToken(TestingParser.REL, 0); }
		public ITerminalNode CH() { return GetToken(TestingParser.CH, 0); }
		public ITerminalNode TYPE2() { return GetToken(TestingParser.TYPE2, 0); }
		public IdchcContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdchc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdchc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdchc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idnc1Context : ExpContext {
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode TYPE1() { return GetToken(TestingParser.TYPE1, 0); }
		public Idnc1Context(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdnc1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdnc1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdnc1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idc22Context : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(TestingParser.ID); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(TestingParser.ID, i);
		}
		public ITerminalNode TYPE2() { return GetToken(TestingParser.TYPE2, 0); }
		public ITerminalNode A() { return GetToken(TestingParser.A, 0); }
		public ITerminalNode CONSTRAINT2() { return GetToken(TestingParser.CONSTRAINT2, 0); }
		public Idc22Context(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdc22(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdc22(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdc22(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idc23Context : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode TYPE3() { return GetToken(TestingParser.TYPE3, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode CONSTRAINT2() { return GetToken(TestingParser.CONSTRAINT2, 0); }
		public Idc23Context(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdc23(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdc23(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdc23(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idnc2cContext : ExpContext {
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode TYPE2() { return GetToken(TestingParser.TYPE2, 0); }
		public Idnc2cContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdnc2c(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdnc2c(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdnc2c(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idc22cContext : ExpContext {
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(TestingParser.ID); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(TestingParser.ID, i);
		}
		public ITerminalNode TYPE2() { return GetToken(TestingParser.TYPE2, 0); }
		public ITerminalNode CONSTRAINT2() { return GetToken(TestingParser.CONSTRAINT2, 0); }
		public Idc22cContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdc22c(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdc22c(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdc22c(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idc12cContext : ExpContext {
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode CONSTRAINT1() { return GetToken(TestingParser.CONSTRAINT1, 0); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode TYPE2() { return GetToken(TestingParser.TYPE2, 0); }
		public Idc12cContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdc12c(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdc12c(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdc12c(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idcht1Context : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(TestingParser.ID); }
		public ITerminalNode TYPE1() { return GetToken(TestingParser.TYPE1, 0); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(TestingParser.ID, i);
		}
		public ITerminalNode REL() { return GetToken(TestingParser.REL, 0); }
		public ITerminalNode CH() { return GetToken(TestingParser.CH, 0); }
		public Idcht1Context(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdcht1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdcht1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdcht1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idcht3Context : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(TestingParser.ID); }
		public ITerminalNode TYPE3() { return GetToken(TestingParser.TYPE3, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(TestingParser.ID, i);
		}
		public ITerminalNode REL() { return GetToken(TestingParser.REL, 0); }
		public ITerminalNode CH() { return GetToken(TestingParser.CH, 0); }
		public Idcht3Context(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdcht3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdcht3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdcht3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Iddf3cContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(TestingParser.ID); }
		public ITerminalNode TYPE3() { return GetToken(TestingParser.TYPE3, 0); }
		public ITerminalNode DF() { return GetToken(TestingParser.DF, 0); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(TestingParser.ID, i);
		}
		public Iddf3cContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIddf3c(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIddf3c(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIddf3c(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdchContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(TestingParser.ID); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(TestingParser.ID, i);
		}
		public ITerminalNode REL() { return GetToken(TestingParser.REL, 0); }
		public ITerminalNode CH() { return GetToken(TestingParser.CH, 0); }
		public ITerminalNode TYPE2() { return GetToken(TestingParser.TYPE2, 0); }
		public ITerminalNode A() { return GetToken(TestingParser.A, 0); }
		public IdchContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdch(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Iddf3aContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(TestingParser.ID); }
		public ITerminalNode TYPE3() { return GetToken(TestingParser.TYPE3, 0); }
		public ITerminalNode DF() { return GetToken(TestingParser.DF, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(TestingParser.ID, i);
		}
		public ITerminalNode A() { return GetToken(TestingParser.A, 0); }
		public Iddf3aContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIddf3a(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIddf3a(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIddf3a(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idc13Context : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode TYPE3() { return GetToken(TestingParser.TYPE3, 0); }
		public ITerminalNode CONSTRAINT1() { return GetToken(TestingParser.CONSTRAINT1, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public Idc13Context(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdc13(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdc13(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdc13(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idc11Context : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode TYPE1() { return GetToken(TestingParser.TYPE1, 0); }
		public ITerminalNode CONSTRAINT1() { return GetToken(TestingParser.CONSTRAINT1, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public Idc11Context(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdc11(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdc11(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdc11(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idnc3aContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode TYPE3() { return GetToken(TestingParser.TYPE3, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode A() { return GetToken(TestingParser.A, 0); }
		public Idnc3aContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdnc3a(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdnc3a(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdnc3a(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Idc12Context : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode CONSTRAINT1() { return GetToken(TestingParser.CONSTRAINT1, 0); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode TYPE2() { return GetToken(TestingParser.TYPE2, 0); }
		public ITerminalNode A() { return GetToken(TestingParser.A, 0); }
		public Idc12Context(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterIdc12(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitIdc12(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdc12(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(_ctx, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				_localctx = new Idnc1Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 54; Match(ID);
				State = 55; Match(TYPE1);
				}
				break;

			case 2:
				{
				_localctx = new Idnc2Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 56; Match(ID);
				State = 57; Match(TYPE2);
				State = 58; Match(T__0);
				State = 59; Match(A);
				State = 60; Match(T__1);
				}
				break;

			case 3:
				{
				_localctx = new Idnc2cContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 61; Match(ID);
				State = 62; Match(TYPE2);
				State = 63; Match(T__0);
				State = 64; Match(NUM);
				State = 65; Match(T__1);
				}
				break;

			case 4:
				{
				_localctx = new Idnc3Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 66; Match(ID);
				State = 67; Match(TYPE3);
				}
				break;

			case 5:
				{
				_localctx = new Idnc3aContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 68; Match(ID);
				State = 69; Match(TYPE3);
				State = 70; Match(T__0);
				State = 71; Match(A);
				State = 72; Match(T__1);
				}
				break;

			case 6:
				{
				_localctx = new Idnc3cContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 73; Match(ID);
				State = 74; Match(TYPE3);
				State = 75; Match(T__0);
				State = 76; Match(NUM);
				State = 77; Match(T__1);
				}
				break;

			case 7:
				{
				_localctx = new Idc11Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 78; Match(ID);
				State = 79; Match(TYPE1);
				State = 80; Match(CONSTRAINT1);
				}
				break;

			case 8:
				{
				_localctx = new Idc12Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 81; Match(ID);
				State = 82; Match(TYPE2);
				State = 83; Match(T__0);
				State = 84; Match(A);
				State = 85; Match(T__1);
				State = 86; Match(CONSTRAINT1);
				}
				break;

			case 9:
				{
				_localctx = new Idc12cContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 87; Match(ID);
				State = 88; Match(TYPE2);
				State = 89; Match(T__0);
				State = 90; Match(NUM);
				State = 91; Match(T__1);
				State = 92; Match(CONSTRAINT1);
				}
				break;

			case 10:
				{
				_localctx = new Idc13Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 93; Match(ID);
				State = 94; Match(TYPE3);
				State = 95; Match(CONSTRAINT1);
				}
				break;

			case 11:
				{
				_localctx = new Idc13aContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 96; Match(ID);
				State = 97; Match(TYPE3);
				State = 98; Match(T__0);
				State = 99; Match(A);
				State = 100; Match(T__1);
				State = 101; Match(CONSTRAINT1);
				}
				break;

			case 12:
				{
				_localctx = new Idc13cContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 102; Match(ID);
				State = 103; Match(TYPE3);
				State = 104; Match(T__0);
				State = 105; Match(NUM);
				State = 106; Match(T__1);
				State = 107; Match(CONSTRAINT1);
				}
				break;

			case 13:
				{
				_localctx = new Idc21Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 108; Match(ID);
				State = 109; Match(TYPE1);
				State = 110; Match(CONSTRAINT2);
				State = 111; Match(ID);
				State = 112; Match(T__0);
				State = 113; Match(ID);
				State = 114; Match(T__1);
				}
				break;

			case 14:
				{
				_localctx = new Idc22Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 115; Match(ID);
				State = 116; Match(TYPE2);
				State = 117; Match(T__0);
				State = 118; Match(A);
				State = 119; Match(T__1);
				State = 120; Match(CONSTRAINT2);
				State = 121; Match(ID);
				State = 122; Match(T__0);
				State = 123; Match(ID);
				State = 124; Match(T__1);
				}
				break;

			case 15:
				{
				_localctx = new Idc22cContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 125; Match(ID);
				State = 126; Match(TYPE2);
				State = 127; Match(T__0);
				State = 128; Match(NUM);
				State = 129; Match(T__1);
				State = 130; Match(CONSTRAINT2);
				State = 131; Match(ID);
				State = 132; Match(T__0);
				State = 133; Match(ID);
				State = 134; Match(T__1);
				}
				break;

			case 16:
				{
				_localctx = new Idc23Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 135; Match(ID);
				State = 136; Match(TYPE3);
				State = 137; Match(CONSTRAINT2);
				}
				break;

			case 17:
				{
				_localctx = new Idc23aContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 138; Match(ID);
				State = 139; Match(TYPE3);
				State = 140; Match(T__0);
				State = 141; Match(A);
				State = 142; Match(T__1);
				State = 143; Match(CONSTRAINT2);
				}
				break;

			case 18:
				{
				_localctx = new Idc23cContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 144; Match(ID);
				State = 145; Match(TYPE3);
				State = 146; Match(T__0);
				State = 147; Match(NUM);
				State = 148; Match(T__1);
				State = 149; Match(CONSTRAINT2);
				}
				break;

			case 19:
				{
				_localctx = new Idcht1Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 150; Match(ID);
				State = 151; Match(TYPE1);
				State = 152; Match(CH);
				State = 153; Match(T__0);
				State = 154; Match(ID);
				State = 155; Match(REL);
				State = 156; Match(NUM);
				State = 157; Match(T__1);
				}
				break;

			case 20:
				{
				_localctx = new IdchContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 158; Match(ID);
				State = 159; Match(TYPE2);
				State = 160; Match(T__0);
				State = 161; Match(A);
				State = 162; Match(T__1);
				State = 163; Match(CH);
				State = 164; Match(T__0);
				State = 165; Match(ID);
				State = 166; Match(REL);
				State = 167; Match(T__3);
				State = 168; Match(ID);
				State = 169; Match(T__3);
				State = 170; Match(T__1);
				}
				break;

			case 21:
				{
				_localctx = new IdchcContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 171; Match(ID);
				State = 172; Match(TYPE2);
				State = 173; Match(T__0);
				State = 174; Match(NUM);
				State = 175; Match(T__1);
				State = 176; Match(CH);
				State = 177; Match(T__0);
				State = 178; Match(ID);
				State = 179; Match(REL);
				State = 180; Match(T__3);
				State = 181; Match(ID);
				State = 182; Match(T__3);
				State = 183; Match(T__1);
				}
				break;

			case 22:
				{
				_localctx = new Idcht3Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 184; Match(ID);
				State = 185; Match(TYPE3);
				State = 186; Match(CH);
				State = 187; Match(T__0);
				State = 188; Match(ID);
				State = 189; Match(REL);
				State = 190; Match(T__3);
				State = 191; Match(ID);
				State = 192; Match(T__3);
				State = 193; Match(T__1);
				}
				break;

			case 23:
				{
				_localctx = new Idch3aContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 194; Match(ID);
				State = 195; Match(TYPE3);
				State = 196; Match(T__0);
				State = 197; Match(A);
				State = 198; Match(T__1);
				State = 199; Match(CH);
				State = 200; Match(T__0);
				State = 201; Match(ID);
				State = 202; Match(REL);
				State = 203; Match(T__3);
				State = 204; Match(ID);
				State = 205; Match(T__3);
				State = 206; Match(T__1);
				}
				break;

			case 24:
				{
				_localctx = new Idch3cContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 207; Match(ID);
				State = 208; Match(TYPE3);
				State = 209; Match(T__0);
				State = 210; Match(NUM);
				State = 211; Match(T__1);
				State = 212; Match(CH);
				State = 213; Match(T__0);
				State = 214; Match(ID);
				State = 215; Match(REL);
				State = 216; Match(T__3);
				State = 217; Match(ID);
				State = 218; Match(T__3);
				State = 219; Match(T__1);
				}
				break;

			case 25:
				{
				_localctx = new Iddf1Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 220; Match(ID);
				State = 221; Match(TYPE1);
				State = 222; Match(DF);
				State = 223; Match(NUM);
				}
				break;

			case 26:
				{
				_localctx = new Iddf2Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 224; Match(ID);
				State = 225; Match(TYPE2);
				State = 226; Match(T__0);
				State = 227; Match(A);
				State = 228; Match(T__1);
				State = 229; Match(DF);
				State = 230; Match(T__3);
				State = 231; Match(ID);
				State = 232; Match(T__3);
				}
				break;

			case 27:
				{
				_localctx = new Iddf2cContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 233; Match(ID);
				State = 234; Match(TYPE2);
				State = 235; Match(T__0);
				State = 236; Match(NUM);
				State = 237; Match(T__1);
				State = 238; Match(DF);
				State = 239; Match(T__3);
				State = 240; Match(ID);
				State = 241; Match(T__3);
				}
				break;

			case 28:
				{
				_localctx = new Iddf3Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 242; Match(ID);
				State = 243; Match(TYPE3);
				State = 244; Match(DF);
				State = 245; Match(T__3);
				State = 246; Match(ID);
				State = 247; Match(T__3);
				}
				break;

			case 29:
				{
				_localctx = new Iddf3aContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 248; Match(ID);
				State = 249; Match(TYPE3);
				State = 250; Match(T__0);
				State = 251; Match(A);
				State = 252; Match(T__1);
				State = 253; Match(DF);
				State = 254; Match(T__3);
				State = 255; Match(ID);
				State = 256; Match(T__3);
				}
				break;

			case 30:
				{
				_localctx = new Iddf3cContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 257; Match(ID);
				State = 258; Match(TYPE3);
				State = 259; Match(T__0);
				State = 260; Match(NUM);
				State = 261; Match(T__1);
				State = 262; Match(DF);
				State = 263; Match(T__3);
				State = 264; Match(ID);
				State = 265; Match(T__3);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 531;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 529;
					switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
					case 1:
						{
						_localctx = new Ridnc1Context(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 268;
						if (!(Precpred(_ctx, 54))) throw new FailedPredicateException(this, "Precpred(_ctx, 54)");
						State = 269; Match(COMMA);
						State = 270; Match(ID);
						State = 271; Match(TYPE1);
						}
						break;

					case 2:
						{
						_localctx = new Ridnc2Context(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 272;
						if (!(Precpred(_ctx, 53))) throw new FailedPredicateException(this, "Precpred(_ctx, 53)");
						State = 273; Match(COMMA);
						State = 274; Match(ID);
						State = 275; Match(TYPE2);
						State = 276; Match(T__0);
						State = 277; Match(A);
						State = 278; Match(T__1);
						}
						break;

					case 3:
						{
						_localctx = new Ridnc2cContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 279;
						if (!(Precpred(_ctx, 52))) throw new FailedPredicateException(this, "Precpred(_ctx, 52)");
						State = 280; Match(COMMA);
						State = 281; Match(ID);
						State = 282; Match(TYPE2);
						State = 283; Match(T__0);
						State = 284; Match(NUM);
						State = 285; Match(T__1);
						}
						break;

					case 4:
						{
						_localctx = new Idnc3Context(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 286;
						if (!(Precpred(_ctx, 51))) throw new FailedPredicateException(this, "Precpred(_ctx, 51)");
						State = 287; Match(COMMA);
						State = 288; Match(ID);
						State = 289; Match(TYPE3);
						}
						break;

					case 5:
						{
						_localctx = new Idnc3aContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 290;
						if (!(Precpred(_ctx, 50))) throw new FailedPredicateException(this, "Precpred(_ctx, 50)");
						State = 291; Match(COMMA);
						State = 292; Match(ID);
						State = 293; Match(TYPE3);
						State = 294; Match(T__0);
						State = 295; Match(A);
						State = 296; Match(T__1);
						}
						break;

					case 6:
						{
						_localctx = new Idnc3cContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 297;
						if (!(Precpred(_ctx, 49))) throw new FailedPredicateException(this, "Precpred(_ctx, 49)");
						State = 298; Match(COMMA);
						State = 299; Match(ID);
						State = 300; Match(TYPE3);
						State = 301; Match(T__0);
						State = 302; Match(NUM);
						State = 303; Match(T__1);
						}
						break;

					case 7:
						{
						_localctx = new Idc11Context(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 304;
						if (!(Precpred(_ctx, 24))) throw new FailedPredicateException(this, "Precpred(_ctx, 24)");
						State = 305; Match(COMMA);
						State = 306; Match(ID);
						State = 307; Match(TYPE1);
						State = 308; Match(CONSTRAINT1);
						}
						break;

					case 8:
						{
						_localctx = new Idc12Context(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 309;
						if (!(Precpred(_ctx, 23))) throw new FailedPredicateException(this, "Precpred(_ctx, 23)");
						State = 310; Match(COMMA);
						State = 311; Match(ID);
						State = 312; Match(TYPE2);
						State = 313; Match(T__0);
						State = 314; Match(A);
						State = 315; Match(T__1);
						State = 316; Match(CONSTRAINT1);
						}
						break;

					case 9:
						{
						_localctx = new Idc12Context(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 317;
						if (!(Precpred(_ctx, 22))) throw new FailedPredicateException(this, "Precpred(_ctx, 22)");
						State = 318; Match(COMMA);
						State = 319; Match(ID);
						State = 320; Match(TYPE2);
						State = 321; Match(T__0);
						State = 322; Match(NUM);
						State = 323; Match(T__1);
						State = 324; Match(CONSTRAINT1);
						}
						break;

					case 10:
						{
						_localctx = new Idc13Context(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 325;
						if (!(Precpred(_ctx, 21))) throw new FailedPredicateException(this, "Precpred(_ctx, 21)");
						State = 326; Match(COMMA);
						State = 327; Match(ID);
						State = 328; Match(TYPE3);
						State = 329; Match(CONSTRAINT1);
						}
						break;

					case 11:
						{
						_localctx = new Idc13aContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 330;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 331; Match(COMMA);
						State = 332; Match(ID);
						State = 333; Match(TYPE3);
						State = 334; Match(T__0);
						State = 335; Match(A);
						State = 336; Match(T__1);
						State = 337; Match(CONSTRAINT1);
						}
						break;

					case 12:
						{
						_localctx = new Idc13cContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 338;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 339; Match(COMMA);
						State = 340; Match(ID);
						State = 341; Match(TYPE3);
						State = 342; Match(T__0);
						State = 343; Match(NUM);
						State = 344; Match(T__1);
						State = 345; Match(CONSTRAINT1);
						}
						break;

					case 13:
						{
						_localctx = new Idc21Context(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 346;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 347; Match(COMMA);
						State = 348; Match(ID);
						State = 349; Match(TYPE1);
						State = 350; Match(CONSTRAINT2);
						State = 351; Match(ID);
						State = 352; Match(T__0);
						State = 353; Match(ID);
						State = 354; Match(T__1);
						}
						break;

					case 14:
						{
						_localctx = new Idc22Context(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 355;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 356; Match(COMMA);
						State = 357; Match(ID);
						State = 358; Match(TYPE2);
						State = 359; Match(T__0);
						State = 360; Match(A);
						State = 361; Match(T__1);
						State = 362; Match(CONSTRAINT2);
						State = 363; Match(ID);
						State = 364; Match(T__0);
						State = 365; Match(ID);
						State = 366; Match(T__1);
						}
						break;

					case 15:
						{
						_localctx = new Idc22Context(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 367;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 368; Match(COMMA);
						State = 369; Match(ID);
						State = 370; Match(TYPE2);
						State = 371; Match(T__0);
						State = 372; Match(NUM);
						State = 373; Match(T__1);
						State = 374; Match(CONSTRAINT2);
						State = 375; Match(ID);
						}
						break;

					case 16:
						{
						_localctx = new Idc23Context(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 376;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 377; Match(COMMA);
						State = 378; Match(ID);
						State = 379; Match(TYPE3);
						State = 380; Match(CONSTRAINT2);
						}
						break;

					case 17:
						{
						_localctx = new Idc23aContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 381;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 382; Match(COMMA);
						State = 383; Match(ID);
						State = 384; Match(TYPE3);
						State = 385; Match(T__0);
						State = 386; Match(A);
						State = 387; Match(T__1);
						State = 388; Match(CONSTRAINT2);
						}
						break;

					case 18:
						{
						_localctx = new Idc23cContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 389;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 390; Match(COMMA);
						State = 391; Match(ID);
						State = 392; Match(TYPE3);
						State = 393; Match(T__0);
						State = 394; Match(NUM);
						State = 395; Match(T__1);
						State = 396; Match(CONSTRAINT2);
						}
						break;

					case 19:
						{
						_localctx = new Idcht1Context(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 397;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 398; Match(COMMA);
						State = 399; Match(ID);
						State = 400; Match(TYPE1);
						State = 401; Match(CH);
						State = 402; Match(T__0);
						State = 403; Match(ID);
						State = 404; Match(REL);
						State = 405; Match(NUM);
						State = 406; Match(T__1);
						}
						break;

					case 20:
						{
						_localctx = new IdchContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 407;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 408; Match(COMMA);
						State = 409; Match(ID);
						State = 410; Match(TYPE2);
						State = 411; Match(T__0);
						State = 412; Match(A);
						State = 413; Match(T__1);
						State = 414; Match(CH);
						State = 415; Match(T__0);
						State = 416; Match(ID);
						State = 417; Match(REL);
						State = 418; Match(ID);
						State = 419; Match(T__1);
						}
						break;

					case 21:
						{
						_localctx = new IdchContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 420;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 421; Match(COMMA);
						State = 422; Match(ID);
						State = 423; Match(TYPE2);
						State = 424; Match(T__0);
						State = 425; Match(NUM);
						State = 426; Match(T__1);
						State = 427; Match(CH);
						State = 428; Match(T__0);
						State = 429; Match(ID);
						State = 430; Match(REL);
						State = 431; Match(ID);
						State = 432; Match(T__1);
						}
						break;

					case 22:
						{
						_localctx = new Idcht3Context(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 433;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 434; Match(COMMA);
						State = 435; Match(ID);
						State = 436; Match(TYPE3);
						State = 437; Match(CH);
						State = 438; Match(T__0);
						State = 439; Match(ID);
						State = 440; Match(REL);
						State = 441; Match(T__3);
						State = 442; Match(ID);
						State = 443; Match(T__3);
						State = 444; Match(T__1);
						}
						break;

					case 23:
						{
						_localctx = new Idch3aContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 445;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 446; Match(COMMA);
						State = 447; Match(ID);
						State = 448; Match(TYPE3);
						State = 449; Match(T__0);
						State = 450; Match(A);
						State = 451; Match(T__1);
						State = 452; Match(CH);
						State = 453; Match(T__0);
						State = 454; Match(ID);
						State = 455; Match(REL);
						State = 456; Match(T__3);
						State = 457; Match(ID);
						State = 458; Match(T__3);
						State = 459; Match(T__1);
						}
						break;

					case 24:
						{
						_localctx = new Idch3cContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 460;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 461; Match(COMMA);
						State = 462; Match(ID);
						State = 463; Match(TYPE3);
						State = 464; Match(T__0);
						State = 465; Match(NUM);
						State = 466; Match(T__1);
						State = 467; Match(CH);
						State = 468; Match(T__0);
						State = 469; Match(ID);
						State = 470; Match(REL);
						State = 471; Match(T__3);
						State = 472; Match(ID);
						State = 473; Match(T__3);
						State = 474; Match(T__1);
						}
						break;

					case 25:
						{
						_localctx = new Iddf1Context(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 475;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 476; Match(COMMA);
						State = 477; Match(ID);
						State = 478; Match(TYPE1);
						State = 479; Match(DF);
						State = 480; Match(NUM);
						}
						break;

					case 26:
						{
						_localctx = new Iddf2Context(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 481;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 482; Match(COMMA);
						State = 483; Match(ID);
						State = 484; Match(TYPE2);
						State = 485; Match(T__0);
						State = 486; Match(A);
						State = 487; Match(T__1);
						State = 488; Match(DF);
						State = 489; Match(ID);
						}
						break;

					case 27:
						{
						_localctx = new Iddf2Context(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 490;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 491; Match(COMMA);
						State = 492; Match(ID);
						State = 493; Match(TYPE2);
						State = 494; Match(T__0);
						State = 495; Match(NUM);
						State = 496; Match(T__1);
						State = 497; Match(DF);
						State = 498; Match(ID);
						}
						break;

					case 28:
						{
						_localctx = new Iddf3Context(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 499;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 500; Match(COMMA);
						State = 501; Match(ID);
						State = 502; Match(TYPE3);
						State = 503; Match(DF);
						State = 504; Match(T__3);
						State = 505; Match(ID);
						State = 506; Match(T__3);
						}
						break;

					case 29:
						{
						_localctx = new Iddf3aContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 507;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 508; Match(COMMA);
						State = 509; Match(ID);
						State = 510; Match(TYPE3);
						State = 511; Match(T__0);
						State = 512; Match(A);
						State = 513; Match(T__1);
						State = 514; Match(DF);
						State = 515; Match(T__3);
						State = 516; Match(ID);
						State = 517; Match(T__3);
						}
						break;

					case 30:
						{
						_localctx = new Iddf3cContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 518;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 519; Match(COMMA);
						State = 520; Match(ID);
						State = 521; Match(TYPE3);
						State = 522; Match(T__0);
						State = 523; Match(NUM);
						State = 524; Match(T__1);
						State = 525; Match(DF);
						State = 526; Match(T__3);
						State = 527; Match(ID);
						State = 528; Match(T__3);
						}
						break;
					}
					} 
				}
				State = 533;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelContext : ParserRuleContext {
		public SelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sel; } }
	 
		public SelContext() { }
		public virtual void CopyFrom(SelContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Selstart3Context : SelContext {
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode WHERE() { return GetToken(TestingParser.WHERE, 0); }
		public ITerminalNode REL() { return GetToken(TestingParser.REL, 0); }
		public SelexpContext selexp() {
			return GetRuleContext<SelexpContext>(0);
		}
		public ITerminalNode SC() { return GetToken(TestingParser.SC, 0); }
		public Selstart3Context(SelContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterSelstart3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitSelstart3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelstart3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Selstart2Context : SelContext {
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(TestingParser.ID); }
		public ITerminalNode WHERE() { return GetToken(TestingParser.WHERE, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(TestingParser.ID, i);
		}
		public ITerminalNode REL() { return GetToken(TestingParser.REL, 0); }
		public SelexpContext selexp() {
			return GetRuleContext<SelexpContext>(0);
		}
		public ITerminalNode SC() { return GetToken(TestingParser.SC, 0); }
		public Selstart2Context(SelContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterSelstart2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitSelstart2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelstart2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Selstart1Context : SelContext {
		public SelexpContext selexp() {
			return GetRuleContext<SelexpContext>(0);
		}
		public ITerminalNode SC() { return GetToken(TestingParser.SC, 0); }
		public Selstart1Context(SelContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterSelstart1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitSelstart1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelstart1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelwarnContext : SelContext {
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode SL() { return GetToken(TestingParser.SL, 0); }
		public ITerminalNode FROM() { return GetToken(TestingParser.FROM, 0); }
		public ITerminalNode SC() { return GetToken(TestingParser.SC, 0); }
		public SelwarnContext(SelContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterSelwarn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitSelwarn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelwarn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelContext sel() {
		SelContext _localctx = new SelContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_sel);
		try {
			State = 556;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				_localctx = new SelwarnContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 534; Match(SL);
				State = 535; Match(T__4);
				State = 536; Match(FROM);
				State = 537; Match(ID);
				State = 538; Match(SC);
				}
				break;

			case 2:
				_localctx = new Selstart1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 539; selexp();
				State = 540; Match(SC);
				}
				break;

			case 3:
				_localctx = new Selstart2Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 542; selexp();
				State = 543; Match(WHERE);
				State = 544; Match(ID);
				State = 545; Match(REL);
				State = 546; Match(ID);
				State = 547; Match(SC);
				}
				break;

			case 4:
				_localctx = new Selstart3Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 549; selexp();
				State = 550; Match(WHERE);
				State = 551; Match(ID);
				State = 552; Match(REL);
				State = 553; Match(NUM);
				State = 554; Match(SC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelexpContext : ParserRuleContext {
		public SelexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selexp; } }
	 
		public SelexpContext() { }
		public virtual void CopyFrom(SelexpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelsecContext : SelexpContext {
		public ITerminalNode SL() { return GetToken(TestingParser.SL, 0); }
		public TabselContext tabsel() {
			return GetRuleContext<TabselContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(TestingParser.FROM, 0); }
		public ColselContext colsel() {
			return GetRuleContext<ColselContext>(0);
		}
		public SelsecContext(SelexpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterSelsec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitSelsec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelsec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelexpContext selexp() {
		SelexpContext _localctx = new SelexpContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_selexp);
		try {
			_localctx = new SelsecContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 558; Match(SL);
			State = 559; colsel(0);
			State = 560; Match(FROM);
			State = 561; tabsel(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColselContext : ParserRuleContext {
		public ColselContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colsel; } }
	 
		public ColselContext() { }
		public virtual void CopyFrom(ColselContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Sid1Context : ColselContext {
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public Sid1Context(ColselContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterSid1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitSid1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSid1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SidContext : ColselContext {
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public ITerminalNode AVG() { return GetToken(TestingParser.AVG, 0); }
		public ColselContext colsel() {
			return GetRuleContext<ColselContext>(0);
		}
		public SidContext(ColselContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterSid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitSid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColselContext colsel() {
		return colsel(0);
	}

	private ColselContext colsel(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ColselContext _localctx = new ColselContext(_ctx, _parentState);
		ColselContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_colsel, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			switch (_input.La(1)) {
			case T__5:
				{
				_localctx = new SidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 564; Match(T__5);
				State = 565; Match(T__0);
				State = 566; Match(ID);
				State = 567; Match(T__1);
				}
				break;
			case T__6:
				{
				_localctx = new Sid1Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 568; Match(T__6);
				State = 569; Match(T__0);
				State = 570; Match(ID);
				State = 571; Match(T__1);
				}
				break;
			case A:
				{
				_localctx = new Sid1Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 572; Match(A);
				State = 573; Match(T__0);
				State = 574; Match(ID);
				State = 575; Match(T__1);
				}
				break;
			case T__7:
				{
				_localctx = new Sid1Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 576; Match(T__7);
				State = 577; Match(T__0);
				State = 578; Match(ID);
				State = 579; Match(T__1);
				}
				break;
			case ID:
				{
				_localctx = new SidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 580; Match(ID);
				}
				break;
			case AVG:
				{
				_localctx = new SidContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 581; Match(AVG);
				State = 582; Match(T__0);
				State = 583; Match(ID);
				State = 584; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 592;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SidContext(new ColselContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_colsel);
					State = 587;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 588; Match(COMMA);
					State = 589; Match(ID);
					}
					} 
				}
				State = 594;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TabselContext : ParserRuleContext {
		public TabselContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabsel; } }
	 
		public TabselContext() { }
		public virtual void CopyFrom(TabselContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Tid1Context : TabselContext {
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public Tid1Context(TabselContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterTid1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitTid1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTid1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TidContext : TabselContext {
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public TabselContext tabsel() {
			return GetRuleContext<TabselContext>(0);
		}
		public TidContext(TabselContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterTid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitTid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabselContext tabsel() {
		return tabsel(0);
	}

	private TabselContext tabsel(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TabselContext _localctx = new TabselContext(_ctx, _parentState);
		TabselContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_tabsel, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Tid1Context(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 596; Match(ID);
			}
			_ctx.stop = _input.Lt(-1);
			State = 603;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TidContext(new TabselContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_tabsel);
					State = 598;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 599; Match(COMMA);
					State = 600; Match(ID);
					}
					} 
				}
				State = 605;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InsContext : ParserRuleContext {
		public InsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ins; } }
	 
		public InsContext() { }
		public virtual void CopyFrom(InsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InstartContext : InsContext {
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public Insexp1Context insexp1() {
			return GetRuleContext<Insexp1Context>(0);
		}
		public ITerminalNode VALUES() { return GetToken(TestingParser.VALUES, 0); }
		public Insexp2Context insexp2() {
			return GetRuleContext<Insexp2Context>(0);
		}
		public ITerminalNode SC() { return GetToken(TestingParser.SC, 0); }
		public ITerminalNode INSERT() { return GetToken(TestingParser.INSERT, 0); }
		public ITerminalNode INTO() { return GetToken(TestingParser.INTO, 0); }
		public InstartContext(InsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterInstart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitInstart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsContext ins() {
		InsContext _localctx = new InsContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_ins);
		try {
			_localctx = new InstartContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 606; Match(INSERT);
			State = 607; Match(INTO);
			State = 608; Match(ID);
			State = 609; Match(T__0);
			State = 610; insexp1(0);
			State = 611; Match(T__1);
			State = 612; Match(VALUES);
			State = 613; Match(T__0);
			State = 614; insexp2(0);
			State = 615; Match(T__1);
			State = 616; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insexp1Context : ParserRuleContext {
		public Insexp1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insexp1; } }
	 
		public Insexp1Context() { }
		public virtual void CopyFrom(Insexp1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Inid1Context : Insexp1Context {
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public Insexp1Context insexp1() {
			return GetRuleContext<Insexp1Context>(0);
		}
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public Inid1Context(Insexp1Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterInid1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitInid1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInid1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insexp1Context insexp1() {
		return insexp1(0);
	}

	private Insexp1Context insexp1(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Insexp1Context _localctx = new Insexp1Context(_ctx, _parentState);
		Insexp1Context _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_insexp1, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Inid1Context(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 619; Match(ID);
			}
			_ctx.stop = _input.Lt(-1);
			State = 626;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Inid1Context(new Insexp1Context(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_insexp1);
					State = 621;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 622; Match(COMMA);
					State = 623; Match(ID);
					}
					} 
				}
				State = 628;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Insexp2Context : ParserRuleContext {
		public Insexp2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insexp2; } }
	 
		public Insexp2Context() { }
		public virtual void CopyFrom(Insexp2Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Inid21Context : Insexp2Context {
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public Insexp2Context insexp2() {
			return GetRuleContext<Insexp2Context>(0);
		}
		public Inid21Context(Insexp2Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterInid21(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitInid21(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInid21(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Inid2Context : Insexp2Context {
		public ITerminalNode ID() { return GetToken(TestingParser.ID, 0); }
		public Inid2Context(Insexp2Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterInid2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitInid2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInid2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InumContext : Insexp2Context {
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public InumContext(Insexp2Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterInum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitInum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Inum1Context : Insexp2Context {
		public ITerminalNode NUM() { return GetToken(TestingParser.NUM, 0); }
		public ITerminalNode COMMA() { return GetToken(TestingParser.COMMA, 0); }
		public Insexp2Context insexp2() {
			return GetRuleContext<Insexp2Context>(0);
		}
		public Inum1Context(Insexp2Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.EnterInum1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITestingListener typedListener = listener as ITestingListener;
			if (typedListener != null) typedListener.ExitInum1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestingVisitor<TResult> typedVisitor = visitor as ITestingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInum1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insexp2Context insexp2() {
		return insexp2(0);
	}

	private Insexp2Context insexp2(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Insexp2Context _localctx = new Insexp2Context(_ctx, _parentState);
		Insexp2Context _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_insexp2, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				_localctx = new Inid2Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 630; Match(T__3);
				State = 631; Match(ID);
				State = 632; Match(T__3);
				}
				break;

			case 2:
				{
				_localctx = new InumContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 633; Match(T__3);
				State = 634; Match(NUM);
				State = 635; Match(T__3);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 650;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 648;
					switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
					case 1:
						{
						_localctx = new Inid21Context(new Insexp2Context(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_insexp2);
						State = 638;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 639; Match(COMMA);
						State = 640; Match(T__3);
						State = 641; Match(ID);
						State = 642; Match(T__3);
						}
						break;

					case 2:
						{
						_localctx = new Inum1Context(new Insexp2Context(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_insexp2);
						State = 643;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 644; Match(COMMA);
						State = 645; Match(T__3);
						State = 646; Match(NUM);
						State = 647; Match(T__3);
						}
						break;
					}
					} 
				}
				State = 652;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return exp_sempred((ExpContext)_localctx, predIndex);

		case 7: return colsel_sempred((ColselContext)_localctx, predIndex);

		case 8: return tabsel_sempred((TabselContext)_localctx, predIndex);

		case 10: return insexp1_sempred((Insexp1Context)_localctx, predIndex);

		case 11: return insexp2_sempred((Insexp2Context)_localctx, predIndex);
		}
		return true;
	}
	private bool tabsel_sempred(TabselContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool colsel_sempred(ColselContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool insexp2_sempred(Insexp2Context _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return Precpred(_ctx, 2);

		case 34: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool insexp1_sempred(Insexp1Context _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 54);

		case 1: return Precpred(_ctx, 53);

		case 2: return Precpred(_ctx, 52);

		case 3: return Precpred(_ctx, 51);

		case 4: return Precpred(_ctx, 50);

		case 5: return Precpred(_ctx, 49);

		case 6: return Precpred(_ctx, 24);

		case 7: return Precpred(_ctx, 23);

		case 8: return Precpred(_ctx, 22);

		case 9: return Precpred(_ctx, 21);

		case 10: return Precpred(_ctx, 20);

		case 11: return Precpred(_ctx, 19);

		case 12: return Precpred(_ctx, 18);

		case 13: return Precpred(_ctx, 17);

		case 14: return Precpred(_ctx, 16);

		case 15: return Precpred(_ctx, 15);

		case 16: return Precpred(_ctx, 14);

		case 17: return Precpred(_ctx, 13);

		case 18: return Precpred(_ctx, 12);

		case 19: return Precpred(_ctx, 11);

		case 20: return Precpred(_ctx, 10);

		case 21: return Precpred(_ctx, 9);

		case 22: return Precpred(_ctx, 8);

		case 23: return Precpred(_ctx, 7);

		case 24: return Precpred(_ctx, 6);

		case 25: return Precpred(_ctx, 5);

		case 26: return Precpred(_ctx, 4);

		case 27: return Precpred(_ctx, 3);

		case 28: return Precpred(_ctx, 2);

		case 29: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3!\x290\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x3\x2\x6\x2\x1C\n\x2\r\x2\xE\x2"+
		"\x1D\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\a\x3&\n\x3\f\x3\xE\x3)\v\x3\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x10D\n\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x214\n\x6\f\x6\xE\x6\x217\v"+
		"\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x22F\n\a\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x24C\n\t\x3"+
		"\t\x3\t\x3\t\a\t\x251\n\t\f\t\xE\t\x254\v\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\a\n\x25C\n\n\f\n\xE\n\x25F\v\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\a\f\x273\n\f\f\f"+
		"\xE\f\x276\v\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x27F\n\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\x28B\n\r\f\r\xE\r\x28E"+
		"\v\r\x3\r\x2\x2\a\n\x10\x12\x16\x18\xE\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x2\x2\x2D1\x2\x1B\x3\x2\x2\x2"+
		"\x4\'\x3\x2\x2\x2\x6*\x3\x2\x2\x2\b\x32\x3\x2\x2\x2\n\x10C\x3\x2\x2\x2"+
		"\f\x22E\x3\x2\x2\x2\xE\x230\x3\x2\x2\x2\x10\x24B\x3\x2\x2\x2\x12\x255"+
		"\x3\x2\x2\x2\x14\x260\x3\x2\x2\x2\x16\x26C\x3\x2\x2\x2\x18\x27E\x3\x2"+
		"\x2\x2\x1A\x1C\x5\x6\x4\x2\x1B\x1A\x3\x2\x2\x2\x1C\x1D\x3\x2\x2\x2\x1D"+
		"\x1B\x3\x2\x2\x2\x1D\x1E\x3\x2\x2\x2\x1E\x1F\x3\x2\x2\x2\x1F \x5\x4\x3"+
		"\x2 \x3\x3\x2\x2\x2!&\x5\f\a\x2\"&\x5\x14\v\x2#&\x5\x6\x4\x2$&\x5\b\x5"+
		"\x2%!\x3\x2\x2\x2%\"\x3\x2\x2\x2%#\x3\x2\x2\x2%$\x3\x2\x2\x2&)\x3\x2\x2"+
		"\x2\'%\x3\x2\x2\x2\'(\x3\x2\x2\x2(\x5\x3\x2\x2\x2)\'\x3\x2\x2\x2*+\a\v"+
		"\x2\x2+,\a\r\x2\x2,-\a\x1F\x2\x2-.\a\x3\x2\x2./\x5\n\x6\x2/\x30\a\x4\x2"+
		"\x2\x30\x31\a\x1B\x2\x2\x31\a\x3\x2\x2\x2\x32\x33\a\x5\x2\x2\x33\x34\a"+
		"\r\x2\x2\x34\x35\a\x1F\x2\x2\x35\x36\a\x1B\x2\x2\x36\t\x3\x2\x2\x2\x37"+
		"\x38\b\x6\x1\x2\x38\x39\a\x1F\x2\x2\x39\x10D\a\xF\x2\x2:;\a\x1F\x2\x2"+
		";<\a\x10\x2\x2<=\a\x3\x2\x2=>\a\x1E\x2\x2>\x10D\a\x4\x2\x2?@\a\x1F\x2"+
		"\x2@\x41\a\x10\x2\x2\x41\x42\a\x3\x2\x2\x42\x43\a\x1A\x2\x2\x43\x10D\a"+
		"\x4\x2\x2\x44\x45\a\x1F\x2\x2\x45\x10D\a\x11\x2\x2\x46G\a\x1F\x2\x2GH"+
		"\a\x11\x2\x2HI\a\x3\x2\x2IJ\a\x1E\x2\x2J\x10D\a\x4\x2\x2KL\a\x1F\x2\x2"+
		"LM\a\x11\x2\x2MN\a\x3\x2\x2NO\a\x1A\x2\x2O\x10D\a\x4\x2\x2PQ\a\x1F\x2"+
		"\x2QR\a\xF\x2\x2R\x10D\a\x12\x2\x2ST\a\x1F\x2\x2TU\a\x10\x2\x2UV\a\x3"+
		"\x2\x2VW\a\x1E\x2\x2WX\a\x4\x2\x2X\x10D\a\x12\x2\x2YZ\a\x1F\x2\x2Z[\a"+
		"\x10\x2\x2[\\\a\x3\x2\x2\\]\a\x1A\x2\x2]^\a\x4\x2\x2^\x10D\a\x12\x2\x2"+
		"_`\a\x1F\x2\x2`\x61\a\x11\x2\x2\x61\x10D\a\x12\x2\x2\x62\x63\a\x1F\x2"+
		"\x2\x63\x64\a\x11\x2\x2\x64\x65\a\x3\x2\x2\x65\x66\a\x1E\x2\x2\x66g\a"+
		"\x4\x2\x2g\x10D\a\x12\x2\x2hi\a\x1F\x2\x2ij\a\x11\x2\x2jk\a\x3\x2\x2k"+
		"l\a\x1A\x2\x2lm\a\x4\x2\x2m\x10D\a\x12\x2\x2no\a\x1F\x2\x2op\a\xF\x2\x2"+
		"pq\a\x13\x2\x2qr\a\x1F\x2\x2rs\a\x3\x2\x2st\a\x1F\x2\x2t\x10D\a\x4\x2"+
		"\x2uv\a\x1F\x2\x2vw\a\x10\x2\x2wx\a\x3\x2\x2xy\a\x1E\x2\x2yz\a\x4\x2\x2"+
		"z{\a\x13\x2\x2{|\a\x1F\x2\x2|}\a\x3\x2\x2}~\a\x1F\x2\x2~\x10D\a\x4\x2"+
		"\x2\x7F\x80\a\x1F\x2\x2\x80\x81\a\x10\x2\x2\x81\x82\a\x3\x2\x2\x82\x83"+
		"\a\x1A\x2\x2\x83\x84\a\x4\x2\x2\x84\x85\a\x13\x2\x2\x85\x86\a\x1F\x2\x2"+
		"\x86\x87\a\x3\x2\x2\x87\x88\a\x1F\x2\x2\x88\x10D\a\x4\x2\x2\x89\x8A\a"+
		"\x1F\x2\x2\x8A\x8B\a\x11\x2\x2\x8B\x10D\a\x13\x2\x2\x8C\x8D\a\x1F\x2\x2"+
		"\x8D\x8E\a\x11\x2\x2\x8E\x8F\a\x3\x2\x2\x8F\x90\a\x1E\x2\x2\x90\x91\a"+
		"\x4\x2\x2\x91\x10D\a\x13\x2\x2\x92\x93\a\x1F\x2\x2\x93\x94\a\x11\x2\x2"+
		"\x94\x95\a\x3\x2\x2\x95\x96\a\x1A\x2\x2\x96\x97\a\x4\x2\x2\x97\x10D\a"+
		"\x13\x2\x2\x98\x99\a\x1F\x2\x2\x99\x9A\a\xF\x2\x2\x9A\x9B\a\x14\x2\x2"+
		"\x9B\x9C\a\x3\x2\x2\x9C\x9D\a\x1F\x2\x2\x9D\x9E\a\x1C\x2\x2\x9E\x9F\a"+
		"\x1A\x2\x2\x9F\x10D\a\x4\x2\x2\xA0\xA1\a\x1F\x2\x2\xA1\xA2\a\x10\x2\x2"+
		"\xA2\xA3\a\x3\x2\x2\xA3\xA4\a\x1E\x2\x2\xA4\xA5\a\x4\x2\x2\xA5\xA6\a\x14"+
		"\x2\x2\xA6\xA7\a\x3\x2\x2\xA7\xA8\a\x1F\x2\x2\xA8\xA9\a\x1C\x2\x2\xA9"+
		"\xAA\a\x6\x2\x2\xAA\xAB\a\x1F\x2\x2\xAB\xAC\a\x6\x2\x2\xAC\x10D\a\x4\x2"+
		"\x2\xAD\xAE\a\x1F\x2\x2\xAE\xAF\a\x10\x2\x2\xAF\xB0\a\x3\x2\x2\xB0\xB1"+
		"\a\x1A\x2\x2\xB1\xB2\a\x4\x2\x2\xB2\xB3\a\x14\x2\x2\xB3\xB4\a\x3\x2\x2"+
		"\xB4\xB5\a\x1F\x2\x2\xB5\xB6\a\x1C\x2\x2\xB6\xB7\a\x6\x2\x2\xB7\xB8\a"+
		"\x1F\x2\x2\xB8\xB9\a\x6\x2\x2\xB9\x10D\a\x4\x2\x2\xBA\xBB\a\x1F\x2\x2"+
		"\xBB\xBC\a\x11\x2\x2\xBC\xBD\a\x14\x2\x2\xBD\xBE\a\x3\x2\x2\xBE\xBF\a"+
		"\x1F\x2\x2\xBF\xC0\a\x1C\x2\x2\xC0\xC1\a\x6\x2\x2\xC1\xC2\a\x1F\x2\x2"+
		"\xC2\xC3\a\x6\x2\x2\xC3\x10D\a\x4\x2\x2\xC4\xC5\a\x1F\x2\x2\xC5\xC6\a"+
		"\x11\x2\x2\xC6\xC7\a\x3\x2\x2\xC7\xC8\a\x1E\x2\x2\xC8\xC9\a\x4\x2\x2\xC9"+
		"\xCA\a\x14\x2\x2\xCA\xCB\a\x3\x2\x2\xCB\xCC\a\x1F\x2\x2\xCC\xCD\a\x1C"+
		"\x2\x2\xCD\xCE\a\x6\x2\x2\xCE\xCF\a\x1F\x2\x2\xCF\xD0\a\x6\x2\x2\xD0\x10D"+
		"\a\x4\x2\x2\xD1\xD2\a\x1F\x2\x2\xD2\xD3\a\x11\x2\x2\xD3\xD4\a\x3\x2\x2"+
		"\xD4\xD5\a\x1A\x2\x2\xD5\xD6\a\x4\x2\x2\xD6\xD7\a\x14\x2\x2\xD7\xD8\a"+
		"\x3\x2\x2\xD8\xD9\a\x1F\x2\x2\xD9\xDA\a\x1C\x2\x2\xDA\xDB\a\x6\x2\x2\xDB"+
		"\xDC\a\x1F\x2\x2\xDC\xDD\a\x6\x2\x2\xDD\x10D\a\x4\x2\x2\xDE\xDF\a\x1F"+
		"\x2\x2\xDF\xE0\a\xF\x2\x2\xE0\xE1\a\x15\x2\x2\xE1\x10D\a\x1A\x2\x2\xE2"+
		"\xE3\a\x1F\x2\x2\xE3\xE4\a\x10\x2\x2\xE4\xE5\a\x3\x2\x2\xE5\xE6\a\x1E"+
		"\x2\x2\xE6\xE7\a\x4\x2\x2\xE7\xE8\a\x15\x2\x2\xE8\xE9\a\x6\x2\x2\xE9\xEA"+
		"\a\x1F\x2\x2\xEA\x10D\a\x6\x2\x2\xEB\xEC\a\x1F\x2\x2\xEC\xED\a\x10\x2"+
		"\x2\xED\xEE\a\x3\x2\x2\xEE\xEF\a\x1A\x2\x2\xEF\xF0\a\x4\x2\x2\xF0\xF1"+
		"\a\x15\x2\x2\xF1\xF2\a\x6\x2\x2\xF2\xF3\a\x1F\x2\x2\xF3\x10D\a\x6\x2\x2"+
		"\xF4\xF5\a\x1F\x2\x2\xF5\xF6\a\x11\x2\x2\xF6\xF7\a\x15\x2\x2\xF7\xF8\a"+
		"\x6\x2\x2\xF8\xF9\a\x1F\x2\x2\xF9\x10D\a\x6\x2\x2\xFA\xFB\a\x1F\x2\x2"+
		"\xFB\xFC\a\x11\x2\x2\xFC\xFD\a\x3\x2\x2\xFD\xFE\a\x1E\x2\x2\xFE\xFF\a"+
		"\x4\x2\x2\xFF\x100\a\x15\x2\x2\x100\x101\a\x6\x2\x2\x101\x102\a\x1F\x2"+
		"\x2\x102\x10D\a\x6\x2\x2\x103\x104\a\x1F\x2\x2\x104\x105\a\x11\x2\x2\x105"+
		"\x106\a\x3\x2\x2\x106\x107\a\x1A\x2\x2\x107\x108\a\x4\x2\x2\x108\x109"+
		"\a\x15\x2\x2\x109\x10A\a\x6\x2\x2\x10A\x10B\a\x1F\x2\x2\x10B\x10D\a\x6"+
		"\x2\x2\x10C\x37\x3\x2\x2\x2\x10C:\x3\x2\x2\x2\x10C?\x3\x2\x2\x2\x10C\x44"+
		"\x3\x2\x2\x2\x10C\x46\x3\x2\x2\x2\x10CK\x3\x2\x2\x2\x10CP\x3\x2\x2\x2"+
		"\x10CS\x3\x2\x2\x2\x10CY\x3\x2\x2\x2\x10C_\x3\x2\x2\x2\x10C\x62\x3\x2"+
		"\x2\x2\x10Ch\x3\x2\x2\x2\x10Cn\x3\x2\x2\x2\x10Cu\x3\x2\x2\x2\x10C\x7F"+
		"\x3\x2\x2\x2\x10C\x89\x3\x2\x2\x2\x10C\x8C\x3\x2\x2\x2\x10C\x92\x3\x2"+
		"\x2\x2\x10C\x98\x3\x2\x2\x2\x10C\xA0\x3\x2\x2\x2\x10C\xAD\x3\x2\x2\x2"+
		"\x10C\xBA\x3\x2\x2\x2\x10C\xC4\x3\x2\x2\x2\x10C\xD1\x3\x2\x2\x2\x10C\xDE"+
		"\x3\x2\x2\x2\x10C\xE2\x3\x2\x2\x2\x10C\xEB\x3\x2\x2\x2\x10C\xF4\x3\x2"+
		"\x2\x2\x10C\xFA\x3\x2\x2\x2\x10C\x103\x3\x2\x2\x2\x10D\x215\x3\x2\x2\x2"+
		"\x10E\x10F\f\x38\x2\x2\x10F\x110\a\x1D\x2\x2\x110\x111\a\x1F\x2\x2\x111"+
		"\x214\a\xF\x2\x2\x112\x113\f\x37\x2\x2\x113\x114\a\x1D\x2\x2\x114\x115"+
		"\a\x1F\x2\x2\x115\x116\a\x10\x2\x2\x116\x117\a\x3\x2\x2\x117\x118\a\x1E"+
		"\x2\x2\x118\x214\a\x4\x2\x2\x119\x11A\f\x36\x2\x2\x11A\x11B\a\x1D\x2\x2"+
		"\x11B\x11C\a\x1F\x2\x2\x11C\x11D\a\x10\x2\x2\x11D\x11E\a\x3\x2\x2\x11E"+
		"\x11F\a\x1A\x2\x2\x11F\x214\a\x4\x2\x2\x120\x121\f\x35\x2\x2\x121\x122"+
		"\a\x1D\x2\x2\x122\x123\a\x1F\x2\x2\x123\x214\a\x11\x2\x2\x124\x125\f\x34"+
		"\x2\x2\x125\x126\a\x1D\x2\x2\x126\x127\a\x1F\x2\x2\x127\x128\a\x11\x2"+
		"\x2\x128\x129\a\x3\x2\x2\x129\x12A\a\x1E\x2\x2\x12A\x214\a\x4\x2\x2\x12B"+
		"\x12C\f\x33\x2\x2\x12C\x12D\a\x1D\x2\x2\x12D\x12E\a\x1F\x2\x2\x12E\x12F"+
		"\a\x11\x2\x2\x12F\x130\a\x3\x2\x2\x130\x131\a\x1A\x2\x2\x131\x214\a\x4"+
		"\x2\x2\x132\x133\f\x1A\x2\x2\x133\x134\a\x1D\x2\x2\x134\x135\a\x1F\x2"+
		"\x2\x135\x136\a\xF\x2\x2\x136\x214\a\x12\x2\x2\x137\x138\f\x19\x2\x2\x138"+
		"\x139\a\x1D\x2\x2\x139\x13A\a\x1F\x2\x2\x13A\x13B\a\x10\x2\x2\x13B\x13C"+
		"\a\x3\x2\x2\x13C\x13D\a\x1E\x2\x2\x13D\x13E\a\x4\x2\x2\x13E\x214\a\x12"+
		"\x2\x2\x13F\x140\f\x18\x2\x2\x140\x141\a\x1D\x2\x2\x141\x142\a\x1F\x2"+
		"\x2\x142\x143\a\x10\x2\x2\x143\x144\a\x3\x2\x2\x144\x145\a\x1A\x2\x2\x145"+
		"\x146\a\x4\x2\x2\x146\x214\a\x12\x2\x2\x147\x148\f\x17\x2\x2\x148\x149"+
		"\a\x1D\x2\x2\x149\x14A\a\x1F\x2\x2\x14A\x14B\a\x11\x2\x2\x14B\x214\a\x12"+
		"\x2\x2\x14C\x14D\f\x16\x2\x2\x14D\x14E\a\x1D\x2\x2\x14E\x14F\a\x1F\x2"+
		"\x2\x14F\x150\a\x11\x2\x2\x150\x151\a\x3\x2\x2\x151\x152\a\x1E\x2\x2\x152"+
		"\x153\a\x4\x2\x2\x153\x214\a\x12\x2\x2\x154\x155\f\x15\x2\x2\x155\x156"+
		"\a\x1D\x2\x2\x156\x157\a\x1F\x2\x2\x157\x158\a\x11\x2\x2\x158\x159\a\x3"+
		"\x2\x2\x159\x15A\a\x1A\x2\x2\x15A\x15B\a\x4\x2\x2\x15B\x214\a\x12\x2\x2"+
		"\x15C\x15D\f\x14\x2\x2\x15D\x15E\a\x1D\x2\x2\x15E\x15F\a\x1F\x2\x2\x15F"+
		"\x160\a\xF\x2\x2\x160\x161\a\x13\x2\x2\x161\x162\a\x1F\x2\x2\x162\x163"+
		"\a\x3\x2\x2\x163\x164\a\x1F\x2\x2\x164\x214\a\x4\x2\x2\x165\x166\f\x13"+
		"\x2\x2\x166\x167\a\x1D\x2\x2\x167\x168\a\x1F\x2\x2\x168\x169\a\x10\x2"+
		"\x2\x169\x16A\a\x3\x2\x2\x16A\x16B\a\x1E\x2\x2\x16B\x16C\a\x4\x2\x2\x16C"+
		"\x16D\a\x13\x2\x2\x16D\x16E\a\x1F\x2\x2\x16E\x16F\a\x3\x2\x2\x16F\x170"+
		"\a\x1F\x2\x2\x170\x214\a\x4\x2\x2\x171\x172\f\x12\x2\x2\x172\x173\a\x1D"+
		"\x2\x2\x173\x174\a\x1F\x2\x2\x174\x175\a\x10\x2\x2\x175\x176\a\x3\x2\x2"+
		"\x176\x177\a\x1A\x2\x2\x177\x178\a\x4\x2\x2\x178\x179\a\x13\x2\x2\x179"+
		"\x214\a\x1F\x2\x2\x17A\x17B\f\x11\x2\x2\x17B\x17C\a\x1D\x2\x2\x17C\x17D"+
		"\a\x1F\x2\x2\x17D\x17E\a\x11\x2\x2\x17E\x214\a\x13\x2\x2\x17F\x180\f\x10"+
		"\x2\x2\x180\x181\a\x1D\x2\x2\x181\x182\a\x1F\x2\x2\x182\x183\a\x11\x2"+
		"\x2\x183\x184\a\x3\x2\x2\x184\x185\a\x1E\x2\x2\x185\x186\a\x4\x2\x2\x186"+
		"\x214\a\x13\x2\x2\x187\x188\f\xF\x2\x2\x188\x189\a\x1D\x2\x2\x189\x18A"+
		"\a\x1F\x2\x2\x18A\x18B\a\x11\x2\x2\x18B\x18C\a\x3\x2\x2\x18C\x18D\a\x1A"+
		"\x2\x2\x18D\x18E\a\x4\x2\x2\x18E\x214\a\x13\x2\x2\x18F\x190\f\xE\x2\x2"+
		"\x190\x191\a\x1D\x2\x2\x191\x192\a\x1F\x2\x2\x192\x193\a\xF\x2\x2\x193"+
		"\x194\a\x14\x2\x2\x194\x195\a\x3\x2\x2\x195\x196\a\x1F\x2\x2\x196\x197"+
		"\a\x1C\x2\x2\x197\x198\a\x1A\x2\x2\x198\x214\a\x4\x2\x2\x199\x19A\f\r"+
		"\x2\x2\x19A\x19B\a\x1D\x2\x2\x19B\x19C\a\x1F\x2\x2\x19C\x19D\a\x10\x2"+
		"\x2\x19D\x19E\a\x3\x2\x2\x19E\x19F\a\x1E\x2\x2\x19F\x1A0\a\x4\x2\x2\x1A0"+
		"\x1A1\a\x14\x2\x2\x1A1\x1A2\a\x3\x2\x2\x1A2\x1A3\a\x1F\x2\x2\x1A3\x1A4"+
		"\a\x1C\x2\x2\x1A4\x1A5\a\x1F\x2\x2\x1A5\x214\a\x4\x2\x2\x1A6\x1A7\f\f"+
		"\x2\x2\x1A7\x1A8\a\x1D\x2\x2\x1A8\x1A9\a\x1F\x2\x2\x1A9\x1AA\a\x10\x2"+
		"\x2\x1AA\x1AB\a\x3\x2\x2\x1AB\x1AC\a\x1A\x2\x2\x1AC\x1AD\a\x4\x2\x2\x1AD"+
		"\x1AE\a\x14\x2\x2\x1AE\x1AF\a\x3\x2\x2\x1AF\x1B0\a\x1F\x2\x2\x1B0\x1B1"+
		"\a\x1C\x2\x2\x1B1\x1B2\a\x1F\x2\x2\x1B2\x214\a\x4\x2\x2\x1B3\x1B4\f\v"+
		"\x2\x2\x1B4\x1B5\a\x1D\x2\x2\x1B5\x1B6\a\x1F\x2\x2\x1B6\x1B7\a\x11\x2"+
		"\x2\x1B7\x1B8\a\x14\x2\x2\x1B8\x1B9\a\x3\x2\x2\x1B9\x1BA\a\x1F\x2\x2\x1BA"+
		"\x1BB\a\x1C\x2\x2\x1BB\x1BC\a\x6\x2\x2\x1BC\x1BD\a\x1F\x2\x2\x1BD\x1BE"+
		"\a\x6\x2\x2\x1BE\x214\a\x4\x2\x2\x1BF\x1C0\f\n\x2\x2\x1C0\x1C1\a\x1D\x2"+
		"\x2\x1C1\x1C2\a\x1F\x2\x2\x1C2\x1C3\a\x11\x2\x2\x1C3\x1C4\a\x3\x2\x2\x1C4"+
		"\x1C5\a\x1E\x2\x2\x1C5\x1C6\a\x4\x2\x2\x1C6\x1C7\a\x14\x2\x2\x1C7\x1C8"+
		"\a\x3\x2\x2\x1C8\x1C9\a\x1F\x2\x2\x1C9\x1CA\a\x1C\x2\x2\x1CA\x1CB\a\x6"+
		"\x2\x2\x1CB\x1CC\a\x1F\x2\x2\x1CC\x1CD\a\x6\x2\x2\x1CD\x214\a\x4\x2\x2"+
		"\x1CE\x1CF\f\t\x2\x2\x1CF\x1D0\a\x1D\x2\x2\x1D0\x1D1\a\x1F\x2\x2\x1D1"+
		"\x1D2\a\x11\x2\x2\x1D2\x1D3\a\x3\x2\x2\x1D3\x1D4\a\x1A\x2\x2\x1D4\x1D5"+
		"\a\x4\x2\x2\x1D5\x1D6\a\x14\x2\x2\x1D6\x1D7\a\x3\x2\x2\x1D7\x1D8\a\x1F"+
		"\x2\x2\x1D8\x1D9\a\x1C\x2\x2\x1D9\x1DA\a\x6\x2\x2\x1DA\x1DB\a\x1F\x2\x2"+
		"\x1DB\x1DC\a\x6\x2\x2\x1DC\x214\a\x4\x2\x2\x1DD\x1DE\f\b\x2\x2\x1DE\x1DF"+
		"\a\x1D\x2\x2\x1DF\x1E0\a\x1F\x2\x2\x1E0\x1E1\a\xF\x2\x2\x1E1\x1E2\a\x15"+
		"\x2\x2\x1E2\x214\a\x1A\x2\x2\x1E3\x1E4\f\a\x2\x2\x1E4\x1E5\a\x1D\x2\x2"+
		"\x1E5\x1E6\a\x1F\x2\x2\x1E6\x1E7\a\x10\x2\x2\x1E7\x1E8\a\x3\x2\x2\x1E8"+
		"\x1E9\a\x1E\x2\x2\x1E9\x1EA\a\x4\x2\x2\x1EA\x1EB\a\x15\x2\x2\x1EB\x214"+
		"\a\x1F\x2\x2\x1EC\x1ED\f\x6\x2\x2\x1ED\x1EE\a\x1D\x2\x2\x1EE\x1EF\a\x1F"+
		"\x2\x2\x1EF\x1F0\a\x10\x2\x2\x1F0\x1F1\a\x3\x2\x2\x1F1\x1F2\a\x1A\x2\x2"+
		"\x1F2\x1F3\a\x4\x2\x2\x1F3\x1F4\a\x15\x2\x2\x1F4\x214\a\x1F\x2\x2\x1F5"+
		"\x1F6\f\x5\x2\x2\x1F6\x1F7\a\x1D\x2\x2\x1F7\x1F8\a\x1F\x2\x2\x1F8\x1F9"+
		"\a\x11\x2\x2\x1F9\x1FA\a\x15\x2\x2\x1FA\x1FB\a\x6\x2\x2\x1FB\x1FC\a\x1F"+
		"\x2\x2\x1FC\x214\a\x6\x2\x2\x1FD\x1FE\f\x4\x2\x2\x1FE\x1FF\a\x1D\x2\x2"+
		"\x1FF\x200\a\x1F\x2\x2\x200\x201\a\x11\x2\x2\x201\x202\a\x3\x2\x2\x202"+
		"\x203\a\x1E\x2\x2\x203\x204\a\x4\x2\x2\x204\x205\a\x15\x2\x2\x205\x206"+
		"\a\x6\x2\x2\x206\x207\a\x1F\x2\x2\x207\x214\a\x6\x2\x2\x208\x209\f\x3"+
		"\x2\x2\x209\x20A\a\x1D\x2\x2\x20A\x20B\a\x1F\x2\x2\x20B\x20C\a\x11\x2"+
		"\x2\x20C\x20D\a\x3\x2\x2\x20D\x20E\a\x1A\x2\x2\x20E\x20F\a\x4\x2\x2\x20F"+
		"\x210\a\x15\x2\x2\x210\x211\a\x6\x2\x2\x211\x212\a\x1F\x2\x2\x212\x214"+
		"\a\x6\x2\x2\x213\x10E\x3\x2\x2\x2\x213\x112\x3\x2\x2\x2\x213\x119\x3\x2"+
		"\x2\x2\x213\x120\x3\x2\x2\x2\x213\x124\x3\x2\x2\x2\x213\x12B\x3\x2\x2"+
		"\x2\x213\x132\x3\x2\x2\x2\x213\x137\x3\x2\x2\x2\x213\x13F\x3\x2\x2\x2"+
		"\x213\x147\x3\x2\x2\x2\x213\x14C\x3\x2\x2\x2\x213\x154\x3\x2\x2\x2\x213"+
		"\x15C\x3\x2\x2\x2\x213\x165\x3\x2\x2\x2\x213\x171\x3\x2\x2\x2\x213\x17A"+
		"\x3\x2\x2\x2\x213\x17F\x3\x2\x2\x2\x213\x187\x3\x2\x2\x2\x213\x18F\x3"+
		"\x2\x2\x2\x213\x199\x3\x2\x2\x2\x213\x1A6\x3\x2\x2\x2\x213\x1B3\x3\x2"+
		"\x2\x2\x213\x1BF\x3\x2\x2\x2\x213\x1CE\x3\x2\x2\x2\x213\x1DD\x3\x2\x2"+
		"\x2\x213\x1E3\x3\x2\x2\x2\x213\x1EC\x3\x2\x2\x2\x213\x1F5\x3\x2\x2\x2"+
		"\x213\x1FD\x3\x2\x2\x2\x213\x208\x3\x2\x2\x2\x214\x217\x3\x2\x2\x2\x215"+
		"\x213\x3\x2\x2\x2\x215\x216\x3\x2\x2\x2\x216\v\x3\x2\x2\x2\x217\x215\x3"+
		"\x2\x2\x2\x218\x219\a\f\x2\x2\x219\x21A\a\a\x2\x2\x21A\x21B\a\x19\x2\x2"+
		"\x21B\x21C\a\x1F\x2\x2\x21C\x22F\a\x1B\x2\x2\x21D\x21E\x5\xE\b\x2\x21E"+
		"\x21F\a\x1B\x2\x2\x21F\x22F\x3\x2\x2\x2\x220\x221\x5\xE\b\x2\x221\x222"+
		"\a\xE\x2\x2\x222\x223\a\x1F\x2\x2\x223\x224\a\x1C\x2\x2\x224\x225\a\x1F"+
		"\x2\x2\x225\x226\a\x1B\x2\x2\x226\x22F\x3\x2\x2\x2\x227\x228\x5\xE\b\x2"+
		"\x228\x229\a\xE\x2\x2\x229\x22A\a\x1F\x2\x2\x22A\x22B\a\x1C\x2\x2\x22B"+
		"\x22C\a\x1A\x2\x2\x22C\x22D\a\x1B\x2\x2\x22D\x22F\x3\x2\x2\x2\x22E\x218"+
		"\x3\x2\x2\x2\x22E\x21D\x3\x2\x2\x2\x22E\x220\x3\x2\x2\x2\x22E\x227\x3"+
		"\x2\x2\x2\x22F\r\x3\x2\x2\x2\x230\x231\a\f\x2\x2\x231\x232\x5\x10\t\x2"+
		"\x232\x233\a\x19\x2\x2\x233\x234\x5\x12\n\x2\x234\xF\x3\x2\x2\x2\x235"+
		"\x236\b\t\x1\x2\x236\x237\a\b\x2\x2\x237\x238\a\x3\x2\x2\x238\x239\a\x1F"+
		"\x2\x2\x239\x24C\a\x4\x2\x2\x23A\x23B\a\t\x2\x2\x23B\x23C\a\x3\x2\x2\x23C"+
		"\x23D\a\x1F\x2\x2\x23D\x24C\a\x4\x2\x2\x23E\x23F\a\x1E\x2\x2\x23F\x240"+
		"\a\x3\x2\x2\x240\x241\a\x1F\x2\x2\x241\x24C\a\x4\x2\x2\x242\x243\a\n\x2"+
		"\x2\x243\x244\a\x3\x2\x2\x244\x245\a\x1F\x2\x2\x245\x24C\a\x4\x2\x2\x246"+
		"\x24C\a\x1F\x2\x2\x247\x248\a!\x2\x2\x248\x249\a\x3\x2\x2\x249\x24A\a"+
		"\x1F\x2\x2\x24A\x24C\a\x4\x2\x2\x24B\x235\x3\x2\x2\x2\x24B\x23A\x3\x2"+
		"\x2\x2\x24B\x23E\x3\x2\x2\x2\x24B\x242\x3\x2\x2\x2\x24B\x246\x3\x2\x2"+
		"\x2\x24B\x247\x3\x2\x2\x2\x24C\x252\x3\x2\x2\x2\x24D\x24E\f\x3\x2\x2\x24E"+
		"\x24F\a\x1D\x2\x2\x24F\x251\a\x1F\x2\x2\x250\x24D\x3\x2\x2\x2\x251\x254"+
		"\x3\x2\x2\x2\x252\x250\x3\x2\x2\x2\x252\x253\x3\x2\x2\x2\x253\x11\x3\x2"+
		"\x2\x2\x254\x252\x3\x2\x2\x2\x255\x256\b\n\x1\x2\x256\x257\a\x1F\x2\x2"+
		"\x257\x25D\x3\x2\x2\x2\x258\x259\f\x3\x2\x2\x259\x25A\a\x1D\x2\x2\x25A"+
		"\x25C\a\x1F\x2\x2\x25B\x258\x3\x2\x2\x2\x25C\x25F\x3\x2\x2\x2\x25D\x25B"+
		"\x3\x2\x2\x2\x25D\x25E\x3\x2\x2\x2\x25E\x13\x3\x2\x2\x2\x25F\x25D\x3\x2"+
		"\x2\x2\x260\x261\a\x16\x2\x2\x261\x262\a\x17\x2\x2\x262\x263\a\x1F\x2"+
		"\x2\x263\x264\a\x3\x2\x2\x264\x265\x5\x16\f\x2\x265\x266\a\x4\x2\x2\x266"+
		"\x267\a\x18\x2\x2\x267\x268\a\x3\x2\x2\x268\x269\x5\x18\r\x2\x269\x26A"+
		"\a\x4\x2\x2\x26A\x26B\a\x1B\x2\x2\x26B\x15\x3\x2\x2\x2\x26C\x26D\b\f\x1"+
		"\x2\x26D\x26E\a\x1F\x2\x2\x26E\x274\x3\x2\x2\x2\x26F\x270\f\x3\x2\x2\x270"+
		"\x271\a\x1D\x2\x2\x271\x273\a\x1F\x2\x2\x272\x26F\x3\x2\x2\x2\x273\x276"+
		"\x3\x2\x2\x2\x274\x272\x3\x2\x2\x2\x274\x275\x3\x2\x2\x2\x275\x17\x3\x2"+
		"\x2\x2\x276\x274\x3\x2\x2\x2\x277\x278\b\r\x1\x2\x278\x279\a\x6\x2\x2"+
		"\x279\x27A\a\x1F\x2\x2\x27A\x27F\a\x6\x2\x2\x27B\x27C\a\x6\x2\x2\x27C"+
		"\x27D\a\x1A\x2\x2\x27D\x27F\a\x6\x2\x2\x27E\x277\x3\x2\x2\x2\x27E\x27B"+
		"\x3\x2\x2\x2\x27F\x28C\x3\x2\x2\x2\x280\x281\f\x4\x2\x2\x281\x282\a\x1D"+
		"\x2\x2\x282\x283\a\x6\x2\x2\x283\x284\a\x1F\x2\x2\x284\x28B\a\x6\x2\x2"+
		"\x285\x286\f\x3\x2\x2\x286\x287\a\x1D\x2\x2\x287\x288\a\x6\x2\x2\x288"+
		"\x289\a\x1A\x2\x2\x289\x28B\a\x6\x2\x2\x28A\x280\x3\x2\x2\x2\x28A\x285"+
		"\x3\x2\x2\x2\x28B\x28E\x3\x2\x2\x2\x28C\x28A\x3\x2\x2\x2\x28C\x28D\x3"+
		"\x2\x2\x2\x28D\x19\x3\x2\x2\x2\x28E\x28C\x3\x2\x2\x2\x10\x1D%\'\x10C\x213"+
		"\x215\x22E\x24B\x252\x25D\x274\x27E\x28A\x28C";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Testing
